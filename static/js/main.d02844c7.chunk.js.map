{"version":3,"sources":["logo.svg","actions/index.js","constants/actionTypes.js","constants/graph.js","components/Node/index.js","reducers/graph.js","reducers/algorithm.js","reducers/index.js","store/index.js","algorithms/helpers.js","algorithms/PriorityQueue.js","algorithms/dijkstra.js","components/ActionsBar/index.js","components/Graph/index.js","App.js","index.js"],"names":["module","exports","setNodeType","node","nodeType","type","setGraphMode","graphMode","GraphModes","Object","freeze","START","END","WALL","NodeTypes","DEFAULT","TRAVERSED","PATH","Node","row","col","className","onClick","disabled","style","height","width","getInitialState","rows","Math","floor","window","innerHeight","columns","innerWidth","matrix","Array","map","x","currStart","currEnd","reducer","newMatrix","state","action","rowArr","i","j","initialState","isRunning","rootReducer","combineReducers","graph","algorithm","store","createStore","adjacent","adjacentNodes","Set","length","add","sleep","ms","Promise","resolve","setTimeout","parent","left","right","PriorityQueue","comparator","a","b","this","_heap","_comparator","size","isEmpty","value","priority","element","push","_siftUp","popped","bottom","_swap","pop","_siftDown","_greater","maxChild","dispatch","getState","start","end","pq","distances","Infinity","previous","visited","reachedEnd","count","top","distance","adj","altDist","u","dijkstra","ActionsBar","useDispatch","algoRunning","useSelector","id","name","htmlFor","defaultChecked","Graph","handleClick","useCallback","rowNum","key","colNum","App","src","logo","alt","render","document","getElementById"],"mappings":"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","file":"static/js/main.d02844c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as ActionTypes from 'constants/actionTypes';\n\nexport const setNodeType = (node, nodeType) => ({\n  type: ActionTypes.SET_NODE_TYPE,\n  node,\n  nodeType,\n});\n\nexport const setGraphMode = (graphMode) => ({\n  type: ActionTypes.SET_GRAPH_MODE,\n  graphMode\n});\n\nexport const clearGraph = () => ({\n  type: ActionTypes.CLEAR_GRAPH,\n});\n\nexport const resetGraph = () => ({\n  type: ActionTypes.RESET_GRAPH,\n});\n\nexport const startAlgorithm = () => ({\n  type: ActionTypes.START_ALGORITHM,\n});\n\nexport const endAlgorithm = () => ({\n  type: ActionTypes.END_ALGORITHM,\n});\n","export const SET_NODE_TYPE = \"SET_NODE_TYPE\";\nexport const SET_GRAPH_MODE = \"SET_GRAPH_MODE\";\nexport const CLEAR_GRAPH = \"CLEAR_GRAPH\";\nexport const RESET_GRAPH = \"RESET_GRAPH\";\nexport const START_ALGORITHM = \"START_ALGORITHM\";\nexport const END_ALGORITHM = \"END_ALGORITHM\";\n","// User selection modes\nexport const GraphModes = Object.freeze({\n  START: \"start\",\n  END: \"end\",\n  WALL: \"wall\",\n});\n\n// Possible node states\nexport const NodeTypes = Object.freeze({\n  DEFAULT: \"default\",\n  START: \"start\",\n  END: \"end\",\n  WALL: \"wall\",\n  TRAVERSED: \"traversed\",\n  PATH: \"path\",\n});\n","import React from 'react';\nimport './styles.css';\n\nexport const NODE_DIMENSION = 34;\n\nconst Node = ({ row, col, className, onClick, disabled }) => {\n  return (\n    <button\n      className={`${className} node`}\n      style={{\n        height: NODE_DIMENSION,\n        width: NODE_DIMENSION\n      }}\n      onClick={() => onClick({ row, col })}\n      disabled={disabled}\n    />\n  );\n};\n\nexport default Node;\n","import { GraphModes, NodeTypes } from 'constants/graph';\nimport { SET_NODE_TYPE, SET_GRAPH_MODE, CLEAR_GRAPH, RESET_GRAPH } from 'constants/actionTypes';\nimport { NODE_DIMENSION } from 'components/Node';\n\nfunction getInitialState() {\n  const rows = Math.floor((window.innerHeight - 75) / NODE_DIMENSION);\n  const columns = Math.floor(window.innerWidth / NODE_DIMENSION);\n\n  const matrix = [...Array(rows)].map(x =>\n    [...Array(columns)].map(x =>\n      NodeTypes.DEFAULT\n    )\n  );\n  const currStart = {\n    row: Math.floor(rows / 2),\n    col: Math.floor(columns / 3) - 1,\n  };\n  const currEnd = {\n    row: Math.floor(rows / 2),\n    col: Math.floor(columns * 2 / 3),\n  };\n\n  matrix[currStart.row][currStart.col] = NodeTypes.START;\n  matrix[currEnd.row][currEnd.col] = NodeTypes.END;\n\n  return {\n    matrix,\n    currStart,\n    currEnd,\n    graphMode: GraphModes.WALL\n  };\n};\n\nfunction reducer(state = getInitialState(), action) {\n  let { matrix, currStart, currEnd } = state;\n  let newMatrix;\n\n  switch (action.type) {\n    case SET_NODE_TYPE:\n      const { node: { row, col }, nodeType } = action;\n\n      // can't overwrite start and end nodes\n      if (matrix[row][col] === NodeTypes.START || matrix[row][col] === NodeTypes.END) {\n        return state;\n      }\n\n      newMatrix = matrix.map((rowArr, i) =>\n        rowArr.map((node, j) => {\n          if (i === row && j === col) {\n            return nodeType;\n          }\n\n          // ensure only one start and end node exist\n          if (nodeType === NodeTypes.START && node === NodeTypes.START) {\n            currStart = { row, col };\n            return NodeTypes.DEFAULT;\n          } else if (nodeType === NodeTypes.END && node === NodeTypes.END) {\n            currEnd = { row, col };\n            return NodeTypes.DEFAULT;\n          }\n\n          return node;\n        })\n      );\n\n      return {\n        ...state,\n        matrix: newMatrix,\n        currStart,\n        currEnd\n      };\n    case SET_GRAPH_MODE:\n      return {\n        ...state,\n        graphMode: action.graphMode\n      };\n    case CLEAR_GRAPH:\n      newMatrix = matrix.map(rowArr =>\n        rowArr.map(node => {\n          if (node === NodeTypes.TRAVERSED || node === NodeTypes.PATH) {\n            return NodeTypes.DEFAULT;\n          }\n\n          return node;\n        })\n      );\n\n      return {\n        ...state,\n        matrix: newMatrix\n      };\n    case RESET_GRAPH:\n      newMatrix = matrix.map(rowArr =>\n        rowArr.map(node => {\n          if (node !== NodeTypes.START && node !== NodeTypes.END) {\n            return NodeTypes.DEFAULT;\n          }\n\n          return node;\n        })\n      );\n\n      return {\n        ...state,\n        matrix: newMatrix\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { START_ALGORITHM, END_ALGORITHM } from 'constants/actionTypes';\n\nconst initialState = {\n  isRunning: false,\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case START_ALGORITHM:\n      return { ...state, isRunning: true };\n    case END_ALGORITHM:\n      return { ...state, isRunning: false };\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport graph from './graph';\nimport algorithm from './algorithm';\n\nconst rootReducer = combineReducers({\n  graph,\n  algorithm,\n});\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from 'reducers';\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import { NodeTypes } from 'constants/graph';\n\nexport function adjacent(node, graph) {\n  const { row, col } = node;\n  const adjacentNodes = new Set();\n\n  if (col !== graph[0].length - 1 && graph[row][col + 1] !== NodeTypes.WALL) {\n    adjacentNodes.add({ row, col: col + 1 });\n  }\n\n  if (col !== 0 && graph[row][col - 1] !== NodeTypes.WALL) {\n    adjacentNodes.add({ row, col: col - 1 });\n  }\n\n  if (row !== graph.length - 1 && graph[row + 1][col] !== NodeTypes.WALL) {\n    adjacentNodes.add({ row: row + 1, col });\n  }\n\n  if (row !== 0 && graph[row - 1][col] !== NodeTypes.WALL) {\n    adjacentNodes.add({ row: row - 1, col });\n  }\n\n  return adjacentNodes;\n}\n\nexport function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","const top = 1;\nconst parent = i => i >> 1;\nconst left = i => i << 1;\nconst right = i => (i << 1) + 1;\n\nexport class PriorityQueue {\n  constructor(comparator = (a, b) => a > b) {\n    this._heap = [0];\n    this._comparator = comparator;\n  }\n\n  size() {\n    return this._heap.length - 1;\n  }\n\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  peek() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n\n    return this._heap[top].value;\n  }\n\n  push(value, priority) {\n    const element = { value, priority };\n    this._heap.push(element);\n    this._siftUp();\n  }\n\n  pop() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n\n    const popped = this._heap[top];\n    const bottom = this.size();\n\n    this._swap(top, bottom);\n    this._heap.pop();\n    this._siftDown();\n\n    return popped;\n  }\n\n  _greater(i, j) {\n    return this._comparator(this._heap[i].priority, this._heap[j].priority);\n  }\n\n  _swap(i, j) {\n    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\n  }\n\n  _siftUp() {\n    let node = this.size();\n    while (node > top && this._greater(node, parent(node))) {\n      this._swap(node, parent(node));\n      node = parent(node);\n    }\n  }\n\n  _siftDown() {\n    let node = top;\n    while (\n      (left(node) <= this.size() && this._greater(left(node), node)) ||\n      (right(node) <= this.size() && this._greater(right(node), node))\n    ) {\n      let maxChild = (right(node) <= this.size() && this._greater(right(node), left(node))) ? right(node) : left(node);\n      this._swap(node, maxChild);\n      node = maxChild;\n    }\n  }\n}\n","import store from 'store';\nimport { setNodeType, clearGraph, startAlgorithm, endAlgorithm } from 'actions';\nimport { NodeTypes } from 'constants/graph';\nimport { adjacent, sleep } from './helpers';\nimport { PriorityQueue } from './PriorityQueue';\n\nasync function dijkstra() {\n  store.dispatch(clearGraph());\n  store.dispatch(startAlgorithm());\n\n  const {\n    matrix: graph,\n    currStart: start,\n    currEnd: end\n  } = store.getState().graph;\n  const rows = graph.length;\n  const columns = graph[0].length;\n  const pq = new PriorityQueue((a, b) => a < b);\n  pq.push(start, 0);\n\n  const distances = [...Array(rows)].map(() =>\n    [...Array(columns)].map(() =>\n      Infinity\n    )\n  );\n  const previous = [...Array(rows)].map(() =>\n    [...Array(columns)].map(() =>\n      undefined\n    )\n  );\n  const visited = [...Array(rows)].map(() =>\n    [...Array(columns)].map(() =>\n      false\n    )\n  );\n\n  let reachedEnd = false;\n  let count = rows * columns;\n\n  while (count > 0 && !reachedEnd) {\n    if (!store.getState().algorithm.isRunning) {\n      break;\n    }\n\n    const top = pq.pop();\n\n    // path does not exist\n    if (!top) {\n      break;\n    }\n\n    const { value: node, priority: distance } = top;\n\n    if (visited[node.row][node.col]) {\n      continue;\n    } else {\n      visited[node.row][node.col] = true;\n    }\n\n    for (const adj of adjacent(node, graph)) {\n      store.dispatch(setNodeType(adj, NodeTypes.TRAVERSED));\n      const altDist = distance + 1;\n\n      if (altDist < distances[adj.row][adj.col]) {\n        distances[adj.row][adj.col] = altDist;\n        previous[adj.row][adj.col] = node;\n        pq.push(adj, altDist);\n      }\n\n      if (adj.row === end.row && adj.col === end.col) {\n        reachedEnd = true;\n      }\n    }\n\n    count--;\n    await sleep(0);\n  }\n\n  let u = previous[end.row][end.col];\n  if (u) {\n    while (u.row !== start.row || u.col !== start.col) {\n      store.dispatch(setNodeType(u, NodeTypes.PATH));\n      u = previous[u.row][u.col];\n    }\n  }\n\n  store.dispatch(endAlgorithm());\n}\n\nexport default dijkstra;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './styles.css';\nimport { setGraphMode, clearGraph, resetGraph, endAlgorithm } from 'actions';\nimport { GraphModes } from 'constants/graph';\nimport dijkstra from 'algorithms/dijkstra';\n\nconst ActionsBar = () => {\n  const dispatch = useDispatch();\n  const algoRunning = useSelector(state => state.algorithm.isRunning);\n\n  return (\n    <div className=\"actions-bar\">\n      <div className=\"mode-container\">\n        <p>Insert:</p>\n        <div className=\"mode-switcher\">\n          <div>\n            <input type=\"radio\" id=\"start-radio\" name=\"graph-mode\" onClick={() => dispatch(setGraphMode(GraphModes.START))} />\n            <label htmlFor=\"start-radio\">START</label>\n          </div>\n          <div>\n            <input type=\"radio\" id=\"end-radio\" name=\"graph-mode\" onClick={() => dispatch(setGraphMode(GraphModes.END))} />\n            <label htmlFor=\"end-radio\">END</label>\n          </div>\n          <div>\n            <input type=\"radio\" id=\"wall-radio\" name=\"graph-mode\" onClick={() => dispatch(setGraphMode(GraphModes.WALL))} defaultChecked />\n            <label htmlFor=\"wall-radio\">WALL</label>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"action-container\">\n        <button className=\"run button\" onClick={dijkstra} disabled={algoRunning}>Run Dijkstra's</button>\n        <button className=\"stop button\" onClick={() => dispatch(endAlgorithm())} disabled={!algoRunning}>Stop</button>\n        <button className=\"action button\" onClick={() => dispatch(clearGraph())} disabled={algoRunning}>Clear Graph</button>\n        <button className=\"action button\" onClick={() => dispatch(resetGraph())} disabled={algoRunning}>Reset Graph</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ActionsBar;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './styles.css';\nimport { GraphModes, NodeTypes } from 'constants/graph';\nimport { setNodeType } from 'actions';\nimport Node from 'components/Node';\n\nconst Graph = () => {\n  const dispatch = useDispatch();\n  const graphMode = useSelector(state => state.graph.graphMode);\n  const matrix = useSelector(state => state.graph.matrix);\n  const algoRunning = useSelector(state => state.algorithm.isRunning);\n\n  const handleClick = useCallback(({ row, col }) => {\n    let nodeType;\n\n    // wall toggling\n    if (graphMode === GraphModes.WALL && matrix[row][col] === NodeTypes.WALL) {\n      nodeType = NodeTypes.DEFAULT;\n    } else {\n      nodeType = graphMode;\n    }\n\n    dispatch(setNodeType({ row, col }, nodeType));\n  }, [dispatch, graphMode, matrix]);\n\n  return (\n    <div className=\"graph\">\n      {matrix && matrix.length > 0 && matrix.map((rowArr, rowNum) => {\n        return (\n          <div key={`row ${rowNum}`}>\n            {rowArr && rowArr.length > 0 && rowArr.map((value, colNum) => {\n              return (\n                <Node\n                  key={`Node (${rowNum}, ${colNum})`}\n                  row={rowNum}\n                  col={colNum}\n                  className={value}\n                  onClick={handleClick}\n                  disabled={algoRunning}\n                />\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Graph;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ActionsBar from 'components/ActionsBar';\nimport Graph from 'components/Graph';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <b>Graph Algorithms Visualizer</b>\n      </header>\n      <ActionsBar />\n      <Graph />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from 'store';\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
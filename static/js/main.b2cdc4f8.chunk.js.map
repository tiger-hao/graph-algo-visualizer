{"version":3,"sources":["logo.svg","constants/index.js","actions/index.js","reducers/graph.js","reducers/index.js","store/index.js","algorithms/dijkstra.js","components/ActionsBar/index.js","components/Node/index.js","components/Graph/index.js","App.js","index.js"],"names":["module","exports","GraphModes","Object","freeze","START","END","WALL","NodeTypes","DEFAULT","TRAVERSED","PATH","changeNodeType","node","nodeType","type","initialState","rows","Math","floor","window","innerHeight","columns","innerWidth","matrix","Array","map","x","currStart","row","col","currEnd","reducer","state","action","rootReducer","combineReducers","graph","store","createStore","adjacent","adjacentNodes","Set","length","add","minDistance","distance","Q","minNode","minDist","Infinity","forEach","element","sleep","ms","Promise","resolve","setTimeout","start","end","a","dispatch","rowArr","rowNum","colNum","previous","u","delete","v","altDist","size","dijkstra","ActionsBar","mode","setMode","useSelector","className","id","name","onClick","for","defaultChecked","Node","Graph","graphMode","useDispatch","handleClick","useCallback","value","App","useState","setGraphMode","src","logo","alt","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2cdc4f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// User selection modes\nexport const GraphModes = Object.freeze({\n  START: \"start\",\n  END: \"end\",\n  WALL: \"wall\",\n});\n\n// Possible node states\nexport const NodeTypes = Object.freeze({\n  DEFAULT: \"default\",\n  START: \"start\",\n  END: \"end\",\n  WALL: \"wall\",\n  TRAVERSED: \"traversed\",\n  PATH: \"path\",\n});\n","export const CHANGE_NODE_TYPE = \"CHANGE_NODE_TYPE\";\n\nexport const changeNodeType = (node, nodeType) => ({\n  type: CHANGE_NODE_TYPE,\n  node,\n  nodeType,\n});\n","import { NodeTypes } from 'constants/index';\nimport { CHANGE_NODE_TYPE } from 'actions';\n\nconst initialState = () => {\n  const rows = Math.floor((window.innerHeight - 75) / 34);\n  const columns = Math.floor(window.innerWidth / 34);\n\n  const matrix = [...Array(rows)].map(x =>\n    [...Array(columns)].map(x =>\n      NodeTypes.DEFAULT\n    )\n  );\n  const currStart = {\n    row: Math.floor(rows / 2),\n    col: Math.floor(columns / 3) - 1,\n  };\n  const currEnd = {\n    row: Math.floor(rows / 2),\n    col: Math.floor(columns * 2 / 3),\n  };\n\n  matrix[currStart.row][currStart.col] = NodeTypes.START;\n  matrix[currEnd.row][currEnd.col] = NodeTypes.END;\n\n  return {\n    matrix,\n    currStart,\n    currEnd,\n  };\n};\n\nconst reducer = (state = initialState(), action) => {\n  let { matrix, currStart, currEnd } = state;\n\n  switch (action.type) {\n    case CHANGE_NODE_TYPE:\n      const { node: { row, col }, nodeType } = action;\n\n      // can't overwrite start and end nodes\n      if (matrix[row][col] !== NodeTypes.START && matrix[row][col] !== NodeTypes.END) {\n        // ensure only one start and end node exist\n        if (nodeType === NodeTypes.START) {\n          if (currStart) {\n            matrix[currStart.row][currStart.col] = NodeTypes.DEFAULT;\n          }\n          currStart = { row, col };\n        } else if (nodeType === NodeTypes.END) {\n          if (currEnd) {\n            matrix[currEnd.row][currEnd.col] = NodeTypes.DEFAULT;\n          }\n          currEnd = { row, col };\n        }\n\n        matrix[row][col] = nodeType;\n      }\n\n      return {\n        matrix,\n        currStart,\n        currEnd,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport graph from './graph';\n\nconst rootReducer = combineReducers({\n  graph,\n});\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from 'reducers';\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import store from 'store';\nimport { changeNodeType } from 'actions';\nimport { NodeTypes } from 'constants/index';\n\nexport function adjacent(node, graph) {\n  const { row, col } = node;\n  const adjacentNodes = new Set();\n\n  if (col !== graph[0].length - 1 && graph[row][col + 1] !== NodeTypes.WALL) {\n    adjacentNodes.add({ row, col: col + 1 });\n  }\n\n  if (col !== 0 && graph[row][col - 1] !== NodeTypes.WALL) {\n    adjacentNodes.add({ row, col: col - 1 });\n  }\n\n  if (row !== graph.length - 1 && graph[row + 1][col] !== NodeTypes.WALL) {\n    adjacentNodes.add({ row: row + 1, col });\n  }\n\n  if (row !== 0 && graph[row - 1][col] !== NodeTypes.WALL) {\n    adjacentNodes.add({ row: row - 1, col });\n  }\n\n  return adjacentNodes;\n}\n\nexport function minDistance(distance, Q) {\n  let minDist = Infinity;\n  let minNode;\n\n  Q.forEach(element => {\n    const { row, col } = element;\n    if (distance[row][col] < minDist) {\n      minDist = distance[row][col];\n      minNode = { row, col };\n    }\n  });\n\n  return minNode;\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function dijkstra(graph, start, end) {\n  const dispatch = store.dispatch;\n  const Q = new Set();\n  const rows = graph.length;\n  const columns = graph[0].length;\n\n  graph.forEach((rowArr, rowNum) => {\n    rowArr.forEach((node, colNum) => {\n      Q.add({\n        row: rowNum,\n        col: colNum\n      });\n    });\n  });\n\n  const distance = [...Array(rows)].map(x =>\n    [...Array(columns)].map(x =>\n      Infinity\n    )\n  );\n\n  const previous = [...Array(rows)].map(x =>\n    [...Array(columns)].map(x =>\n      undefined\n    )\n  );\n\n  distance[start.row][start.col] = 0;\n\n  while (Q.size > 0) {\n    const u = minDistance(distance, Q);\n\n    Q.forEach(element => {\n      if(element.row === u.row && element.col === u.col) {\n        Q.delete(element);\n      }\n    });\n\n    if (u.row === end.row && u.col === end.col) {\n      break;\n    }\n\n    for (const v of adjacent(u, graph)) {\n      dispatch(changeNodeType(v, NodeTypes.TRAVERSED));\n\n      const altDist = distance[u.row][u.col] + 1;\n      if (altDist < distance[v.row][v.col]) {\n        distance[v.row][v.col] = altDist;\n        previous[v.row][v.col] = u;\n      }\n    }\n\n    await sleep(0);\n  }\n\n  let u = previous[end.row][end.col];\n  while (u.row !== start.row || u.col !== start.col) {\n    dispatch(changeNodeType(u, NodeTypes.PATH));\n    u = previous[u.row][u.col];\n  }\n}\n\nexport default dijkstra;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './styles.css';\nimport { GraphModes } from 'constants/index';\nimport dijkstra from 'algorithms/dijkstra';\n\nconst ActionsBar = ({ mode, setMode }) =>  {\n  const { graph, start, end } = useSelector(state => ({\n    graph: state.graph.matrix,\n    start: state.graph.currStart,\n    end: state.graph.currEnd,\n  }));\n\n  return (\n    <div className=\"actions-bar\">\n      <div className=\"mode-container\">\n        <p>Insert:</p>\n        <div className=\"mode-switcher\">\n          <div>\n            <input type=\"radio\" id=\"start-radio\" name=\"graph-mode\" onClick={() => setMode(GraphModes.START)} />\n            <label for=\"start-radio\">START</label>\n          </div>\n          <div>\n            <input type=\"radio\" id=\"end-radio\" name=\"graph-mode\" onClick={() => setMode(GraphModes.END)} />\n            <label for=\"end-radio\">END</label>\n          </div>\n          <div>\n            <input type=\"radio\" id=\"wall-radio\" name=\"graph-mode\" onClick={() => setMode(GraphModes.WALL)} defaultChecked/>\n            <label for=\"wall-radio\">WALL</label>\n          </div>\n        </div>\n      </div>\n\n      <button className=\"run-button\" onClick={() => dijkstra(graph, start, end)}>RUN DIJKSTRA'S</button>\n    </div>\n  );\n};\n\nexport default ActionsBar;\n","import React from 'react';\n\nimport './styles.css';\n\nconst Node = ({ row, col, className, onClick }) => {\n  return (\n    <button className={`${className} node`} onClick={() => onClick({ row, col })} />\n  );\n};\n\nexport default Node;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './styles.css';\nimport { GraphModes, NodeTypes } from 'constants/index';\nimport { changeNodeType } from 'actions';\nimport Node from 'components/Node';\n\nconst Graph = ({ graphMode }) => {\n  const dispatch = useDispatch();\n  const { matrix } = useSelector(state => ({\n    matrix: state.graph.matrix,\n  }));\n\n  const handleClick = useCallback(({ row, col }) => {\n    let nodeType;\n\n    // wall toggling\n    if (graphMode === GraphModes.WALL && matrix[row][col] === NodeTypes.WALL) {\n      nodeType = NodeTypes.DEFAULT;\n    } else {\n      nodeType = graphMode;\n    }\n\n    dispatch(changeNodeType({ row, col }, nodeType));\n  }, [dispatch, graphMode, matrix]);\n\n  return (\n    <div className=\"graph\">\n      {matrix && matrix.length > 0 && matrix.map((rowArr, rowNum) => {\n        return (\n          <div>\n            {rowArr && rowArr.length > 0 && rowArr.map((value, colNum) => {\n              return (\n                <Node row={rowNum} col={colNum} className={value}  onClick={handleClick} />\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Graph;\n","import React, { useState } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport ActionsBar from 'components/ActionsBar';\nimport Graph from 'components/Graph';\nimport { GraphModes } from 'constants/index';\n\nconst App = () => {\n  const [graphMode, setGraphMode] = useState(GraphModes.WALL);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <b>Graph Algorithms Visualizer</b>\n      </header>\n      <ActionsBar mode={graphMode} setMode={setGraphMode}/>\n      <Graph graphMode={graphMode} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from 'store';\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
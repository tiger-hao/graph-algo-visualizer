{"version":3,"sources":["logo.svg","types.js","components/ModeSwitcher/index.js","components/Node/index.js","components/Graph/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GraphModes","Object","freeze","START","END","WALL","NodeTypes","DEFAULT","TRAVERSED","ModeSwitcher","mode","setMode","className","onClick","Node","row","col","initState","height","width","matrix","Array","currStart","Math","floor","currEnd","i","j","reducer","state","action","payload","type","Graph","graphMode","window","innerHeight","innerWidth","useReducer","dispatch","handleClick","length","map","rowArr","rowNum","value","colNum","App","useState","setGraphMode","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a162956.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// User selection modes\nexport const GraphModes = Object.freeze({\n  START: \"start\",\n  END: \"end\",\n  WALL: \"wall\",\n});\n\n// Possible node states\nexport const NodeTypes = Object.freeze({\n  DEFAULT: \"default\",\n  START: \"start\",\n  END: \"end\",\n  WALL: \"wall\",\n  TRAVERSED: \"traversed\",\n});\n","import React from 'react';\n\nimport './styles.css';\nimport { GraphModes } from 'types';\n\nconst ModeSwitcher = ({ mode, setMode }) =>  {\n  return (\n    <div className=\"mode-switcher\">\n      <p>Insert: {mode} </p>\n      <button className=\"mode-button\" onClick={() => setMode(GraphModes.START)}>START</button>\n      <button className=\"mode-button\" onClick={() => setMode(GraphModes.END)}>END</button>\n      <button className=\"mode-button\" onClick={() => setMode(GraphModes.WALL)}>WALL</button>\n    </div>\n  );\n};\n\nexport default ModeSwitcher;\n","import React from 'react';\n\nimport './styles.css';\n\nconst Node = ({ row, col, className, onClick }) => {\n  return (\n    <button className={`${className} node`} onClick={() => onClick({ row, col })} />\n  );\n};\n\nexport default Node;\n","import React, { useReducer } from 'react';\n\nimport './styles.css';\nimport { GraphModes, NodeTypes } from 'types';\nimport Node from 'components/Node';\n\nconst initState = ({ height, width }) => {\n  const matrix = new Array(height);\n  const currStart = {\n    row: Math.floor(height / 2) - 1,\n    col: Math.floor(width / 4) - 1,\n  };\n  const currEnd = {\n    row: Math.floor(height / 2) - 1,\n    col: Math.floor(width * 3 / 4) - 1,\n  };\n\n  for(let i = 0; i < height; i++) {\n    matrix[i] = new Array(width);\n\n    for (let j = 0; j < width; j++) {\n      if (i === currStart.row && j === currStart.col) {\n        matrix[i][j] = NodeTypes.START;\n      } else if (i === currEnd.row && j === currEnd.col) {\n        matrix[i][j] = NodeTypes.END;\n      } else {\n        matrix[i][j] = NodeTypes.DEFAULT;\n      }\n    }\n  }\n\n  return {\n    matrix,\n    currStart,\n    currEnd,\n  };\n};\n\nconst reducer = (state, action) => {\n  let { matrix, currStart, currEnd } = state;\n  const { row, col } = action.payload;\n\n  if (matrix[row][col] !== NodeTypes.START && matrix[row][col] !== NodeTypes.END) {\n    if (action.type === GraphModes.START) {\n      if (currStart) {\n        matrix[currStart.row][currStart.col] = NodeTypes.DEFAULT;\n      }\n      currStart = { row, col };\n    } else if (action.type === GraphModes.END) {\n      if (currEnd) {\n        matrix[currEnd.row][currEnd.col] = NodeTypes.DEFAULT;\n      }\n      currEnd = { row, col };\n    }\n\n    if (action.type === GraphModes.WALL) {\n      matrix[row][col] = matrix[row][col] === NodeTypes.WALL ? NodeTypes.DEFAULT : NodeTypes.WALL;\n    } else {\n      matrix[row][col] = action.type;\n    }\n  }\n\n  return {\n    matrix,\n    currStart,\n    currEnd,\n  };\n};\n\nconst Graph = ({ graphMode }) => {\n  const height = Math.floor((window.innerHeight - 75)/ 34);\n  const width = Math.floor(window.innerWidth / 34);\n  const [state, dispatch] = useReducer(reducer, { height, width }, initState);\n\n  const handleClick = ({ row, col }) => {\n    dispatch({type: graphMode, payload: { row, col }});\n  };\n\n  return (\n    <div className=\"graph\">\n      {state.matrix && state.matrix.length > 0 && state.matrix.map((rowArr, rowNum) => {\n        return (\n          <div>\n            {rowArr && rowArr.length > 0 && rowArr.map((value, colNum) => {\n              return (\n                <Node row={rowNum} col={colNum} className={value}  onClick={handleClick} />\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Graph;\n","import React, { useState } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport ModeSwitcher from 'components/ModeSwitcher';\nimport Graph from 'components/Graph';\nimport { GraphModes } from 'types';\n\nconst App = () => {\n  const [graphMode, setGraphMode] = useState(GraphModes.WALL);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <b>Graph Algorithms Visualizer</b>\n      </header>\n      <ModeSwitcher mode={graphMode} setMode={setGraphMode}/>\n      <Graph graphMode={graphMode} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
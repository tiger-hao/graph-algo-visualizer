{"version":3,"sources":["logo.svg","actions/index.js","constants/index.js","reducers/graph.js","reducers/index.js","store/index.js","algorithms/dijkstra.js","components/ActionsBar/index.js","components/Node/index.js","components/Graph/index.js","App.js","index.js"],"names":["module","exports","changeNodeType","node","nodeType","type","clearGraph","GraphModes","Object","freeze","START","END","WALL","NodeTypes","DEFAULT","TRAVERSED","PATH","initialState","rows","Math","floor","window","innerHeight","columns","innerWidth","matrix","Array","map","x","currStart","row","col","currEnd","reducer","state","action","forEach","rowArr","arr","rootReducer","combineReducers","graph","store","createStore","adjacent","adjacentNodes","Set","length","add","minDistance","distance","Q","minNode","minDist","Infinity","element","sleep","ms","Promise","resolve","setTimeout","start","end","a","dispatch","rowNum","colNum","previous","u","delete","v","altDist","size","dijkstra","ActionsBar","mode","setMode","useDispatch","useSelector","className","id","name","onClick","for","defaultChecked","Node","Graph","graphMode","handleClick","useCallback","value","App","useState","setGraphMode","src","logo","alt","render","document","getElementById"],"mappings":"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","file":"static/js/main.2312a0e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const CHANGE_NODE_TYPE = \"CHANGE_NODE_TYPE\";\nexport const CLEAR_GRAPH = \"CLEAR_GRAPH\";\nexport const RESET_GRAPH = \"RESET_GRAPH\";\n\nexport const changeNodeType = (node, nodeType) => ({\n  type: CHANGE_NODE_TYPE,\n  node,\n  nodeType,\n});\n\nexport const clearGraph = () => ({\n  type: CLEAR_GRAPH,\n});\n\nexport const resetGraph = () => ({\n  type: RESET_GRAPH,\n});\n","// User selection modes\nexport const GraphModes = Object.freeze({\n  START: \"start\",\n  END: \"end\",\n  WALL: \"wall\",\n});\n\n// Possible node states\nexport const NodeTypes = Object.freeze({\n  DEFAULT: \"default\",\n  START: \"start\",\n  END: \"end\",\n  WALL: \"wall\",\n  TRAVERSED: \"traversed\",\n  PATH: \"path\",\n});\n","import { NodeTypes } from 'constants/index';\nimport { CHANGE_NODE_TYPE, CLEAR_GRAPH, RESET_GRAPH } from 'actions';\n\nconst initialState = () => {\n  const rows = Math.floor((window.innerHeight - 75) / 34);\n  const columns = Math.floor(window.innerWidth / 34);\n\n  const matrix = [...Array(rows)].map(x =>\n    [...Array(columns)].map(x =>\n      NodeTypes.DEFAULT\n    )\n  );\n  const currStart = {\n    row: Math.floor(rows / 2),\n    col: Math.floor(columns / 3) - 1,\n  };\n  const currEnd = {\n    row: Math.floor(rows / 2),\n    col: Math.floor(columns * 2 / 3),\n  };\n\n  matrix[currStart.row][currStart.col] = NodeTypes.START;\n  matrix[currEnd.row][currEnd.col] = NodeTypes.END;\n\n  return {\n    matrix,\n    currStart,\n    currEnd,\n  };\n};\n\nconst reducer = (state = initialState(), action) => {\n  let { matrix, currStart, currEnd } = state;\n\n  switch (action.type) {\n    case CHANGE_NODE_TYPE:\n      const { node: { row, col }, nodeType } = action;\n\n      // can't overwrite start and end nodes\n      if (matrix[row][col] !== NodeTypes.START && matrix[row][col] !== NodeTypes.END) {\n        // ensure only one start and end node exist\n        if (nodeType === NodeTypes.START) {\n          if (currStart) {\n            matrix[currStart.row][currStart.col] = NodeTypes.DEFAULT;\n          }\n          currStart = { row, col };\n        } else if (nodeType === NodeTypes.END) {\n          if (currEnd) {\n            matrix[currEnd.row][currEnd.col] = NodeTypes.DEFAULT;\n          }\n          currEnd = { row, col };\n        }\n\n        matrix[row][col] = nodeType;\n      }\n\n      return {\n        matrix,\n        currStart,\n        currEnd,\n      };\n    case CLEAR_GRAPH:\n      matrix.forEach((rowArr, row, arr) => {\n        rowArr.forEach((node, col) => {\n          if (matrix[row][col] === NodeTypes.TRAVERSED || matrix[row][col] === NodeTypes.PATH) {\n            matrix[row][col] = NodeTypes.DEFAULT;\n          }\n        });\n      });\n\n      return {\n        ...state,\n        matrix\n      };\n    case RESET_GRAPH:\n      matrix.forEach((rowArr, row, arr) => {\n        rowArr.forEach((node, col) => {\n          if (matrix[row][col] !== NodeTypes.START && matrix[row][col] !== NodeTypes.END) {\n            matrix[row][col] = NodeTypes.DEFAULT;\n          }\n        });\n      });\n\n      return {\n        ...state,\n        matrix\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport graph from './graph';\n\nconst rootReducer = combineReducers({\n  graph,\n});\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from 'reducers';\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import store from 'store';\nimport { changeNodeType, clearGraph } from 'actions';\nimport { NodeTypes } from 'constants/index';\n\nfunction adjacent(node, graph) {\n  const { row, col } = node;\n  const adjacentNodes = new Set();\n\n  if (col !== graph[0].length - 1 && graph[row][col + 1] !== NodeTypes.WALL) {\n    adjacentNodes.add({ row, col: col + 1 });\n  }\n\n  if (col !== 0 && graph[row][col - 1] !== NodeTypes.WALL) {\n    adjacentNodes.add({ row, col: col - 1 });\n  }\n\n  if (row !== graph.length - 1 && graph[row + 1][col] !== NodeTypes.WALL) {\n    adjacentNodes.add({ row: row + 1, col });\n  }\n\n  if (row !== 0 && graph[row - 1][col] !== NodeTypes.WALL) {\n    adjacentNodes.add({ row: row - 1, col });\n  }\n\n  return adjacentNodes;\n}\n\nfunction minDistance(distance, Q) {\n  let minDist = Infinity;\n  let minNode;\n\n  Q.forEach(element => {\n    const { row, col } = element;\n    if (distance[row][col] < minDist) {\n      minDist = distance[row][col];\n      minNode = { row, col };\n    }\n  });\n\n  return minNode;\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function dijkstra(graph, start, end) {\n  const dispatch = store.dispatch;\n  const Q = new Set();\n  const rows = graph.length;\n  const columns = graph[0].length;\n\n  store.dispatch(clearGraph());\n\n  graph.forEach((rowArr, rowNum) => {\n    rowArr.forEach((node, colNum) => {\n      Q.add({\n        row: rowNum,\n        col: colNum\n      });\n    });\n  });\n\n  const distance = [...Array(rows)].map(x =>\n    [...Array(columns)].map(x =>\n      Infinity\n    )\n  );\n\n  const previous = [...Array(rows)].map(x =>\n    [...Array(columns)].map(x =>\n      undefined\n    )\n  );\n\n  distance[start.row][start.col] = 0;\n\n  while (Q.size > 0) {\n    const u = minDistance(distance, Q);\n\n    // path does not exist\n    if (!u) {\n      break;\n    }\n\n    Q.forEach(element => {\n      if(element.row === u.row && element.col === u.col) {\n        Q.delete(element);\n      }\n    });\n\n    if (u.row === end.row && u.col === end.col) {\n      break;\n    }\n\n    for (const v of adjacent(u, graph)) {\n      dispatch(changeNodeType(v, NodeTypes.TRAVERSED));\n\n      const altDist = distance[u.row][u.col] + 1;\n      if (altDist < distance[v.row][v.col]) {\n        distance[v.row][v.col] = altDist;\n        previous[v.row][v.col] = u;\n      }\n    }\n\n    await sleep(0);\n  }\n\n  let u = previous[end.row][end.col];\n  if (u) {\n    while (u.row !== start.row || u.col !== start.col) {\n      dispatch(changeNodeType(u, NodeTypes.PATH));\n      u = previous[u.row][u.col];\n    }\n  }\n}\n\nexport default dijkstra;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './styles.css';\nimport { clearGraph, resetGraph } from 'actions';\nimport { GraphModes } from 'constants/index';\nimport dijkstra from 'algorithms/dijkstra';\n\nconst ActionsBar = ({ mode, setMode }) =>  {\n  const dispatch = useDispatch();\n  const { graph, start, end } = useSelector(state => ({\n    graph: state.graph.matrix,\n    start: state.graph.currStart,\n    end: state.graph.currEnd,\n  }));\n\n  return (\n    <div className=\"actions-bar\">\n      <div className=\"mode-container\">\n        <p>Insert:</p>\n        <div className=\"mode-switcher\">\n          <div>\n            <input type=\"radio\" id=\"start-radio\" name=\"graph-mode\" onClick={() => setMode(GraphModes.START)} />\n            <label for=\"start-radio\">START</label>\n          </div>\n          <div>\n            <input type=\"radio\" id=\"end-radio\" name=\"graph-mode\" onClick={() => setMode(GraphModes.END)} />\n            <label for=\"end-radio\">END</label>\n          </div>\n          <div>\n            <input type=\"radio\" id=\"wall-radio\" name=\"graph-mode\" onClick={() => setMode(GraphModes.WALL)} defaultChecked/>\n            <label for=\"wall-radio\">WALL</label>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"action-container\">\n        <button className=\"action-button\" onClick={() => dijkstra(graph, start, end)}>Run Dijkstra's</button>\n        <button className=\"action-button\" onClick={() => dispatch(clearGraph())}>Clear Graph</button>\n        <button className=\"action-button\" onClick={() => dispatch(resetGraph())}>Reset Graph</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ActionsBar;\n","import React from 'react';\n\nimport './styles.css';\n\nconst Node = ({ row, col, className, onClick }) => {\n  return (\n    <button className={`${className} node`} onClick={() => onClick({ row, col })} />\n  );\n};\n\nexport default Node;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './styles.css';\nimport { GraphModes, NodeTypes } from 'constants/index';\nimport { changeNodeType } from 'actions';\nimport Node from 'components/Node';\n\nconst Graph = ({ graphMode }) => {\n  const dispatch = useDispatch();\n  const { matrix } = useSelector(state => ({\n    matrix: state.graph.matrix,\n  }));\n\n  const handleClick = useCallback(({ row, col }) => {\n    let nodeType;\n\n    // wall toggling\n    if (graphMode === GraphModes.WALL && matrix[row][col] === NodeTypes.WALL) {\n      nodeType = NodeTypes.DEFAULT;\n    } else {\n      nodeType = graphMode;\n    }\n\n    dispatch(changeNodeType({ row, col }, nodeType));\n  }, [dispatch, graphMode, matrix]);\n\n  return (\n    <div className=\"graph\">\n      {matrix && matrix.length > 0 && matrix.map((rowArr, rowNum) => {\n        return (\n          <div>\n            {rowArr && rowArr.length > 0 && rowArr.map((value, colNum) => {\n              return (\n                <Node row={rowNum} col={colNum} className={value}  onClick={handleClick} />\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Graph;\n","import React, { useState } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport ActionsBar from 'components/ActionsBar';\nimport Graph from 'components/Graph';\nimport { GraphModes } from 'constants/index';\n\nconst App = () => {\n  const [graphMode, setGraphMode] = useState(GraphModes.WALL);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <b>Graph Algorithms Visualizer</b>\n      </header>\n      <ActionsBar mode={graphMode} setMode={setGraphMode}/>\n      <Graph graphMode={graphMode} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from 'store';\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}